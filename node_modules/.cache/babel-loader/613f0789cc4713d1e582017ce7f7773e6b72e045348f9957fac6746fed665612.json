{"ast":null,"code":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\nconst availableLanguages = [\"en\", \"tc\"];\nconst option = {\n  order: [\"navigator\", \"htmlTag\", \"path\", \"subdomail\"],\n  checkWhitelist: true\n};\ni18n\n// load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n// learn more: https://github.com/i18next/i18next-http-backend\n// want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n.use(Backend)\n// detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use(LanguageDetector)\n// pass the i18n instance to react-i18next.\n.use(initReactI18next)\n// init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  fallbackLng: 'en',\n  debug: true,\n  whitelist: availableLanguages,\n  detection: Option,\n  interpolation: {\n    escapeValue: false // not needed for react as it escapes by default\n  }\n});\n\nexport default i18n;","map":{"version":3,"names":["i18n","initReactI18next","Backend","LanguageDetector","availableLanguages","option","order","checkWhitelist","use","init","fallbackLng","debug","whitelist","detection","Option","interpolation","escapeValue"],"sources":["/Users/xuyuanshi/Desktop/technine/src/i18n.js"],"sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\nconst availableLanguages = [\"en\", \"tc\"]\n\nconst option = {\n    order: [\"navigator\", \"htmlTag\", \"path\", \"subdomail\"],\n    checkWhitelist: true\n}\n\ni18n\n    // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n    // learn more: https://github.com/i18next/i18next-http-backend\n    // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n    .use(Backend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        fallbackLng: 'en',\n        debug: true,\n        whitelist: availableLanguages,\n        detection: Option,\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        }\n    });\n\n\nexport default i18n;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,gBAAgB,QAAQ,eAAe;AAEhD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;AAEvC,MAAMC,MAAM,GAAG;EACXC,KAAK,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,CAAC;EACpDC,cAAc,EAAE;AACpB,CAAC;AAEDP;AACI;AACA;AACA;AAAA,CACCQ,GAAG,CAACN,OAAO;AACZ;AACA;AAAA,CACCM,GAAG,CAACL,gBAAgB;AACrB;AAAA,CACCK,GAAG,CAACP,gBAAgB;AACrB;AACA;AAAA,CACCQ,IAAI,CAAC;EACFC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAER,kBAAkB;EAC7BS,SAAS,EAAEC,MAAM;EACjBC,aAAa,EAAE;IACXC,WAAW,EAAE,KAAK,CAAE;EACxB;AACJ,CAAC,CAAC;;AAGN,eAAehB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}